package userclasses.PrayerTime;

/*
 * mMath.java
 *
 * Created on 14 January 2006, 20:00
 *
 * (c) 2006 Richard Carless
 *
 * Fills holes in the java maths library
 */

import java.lang.Math;

public class mMath 
{
    // constants
    static final double sq2p1=0;
    static final double sq2m1=0;
    static final double p4=0;
    static final double p3=0;
    static final double p2=0;
    static final double p1=0;
    static final double p0=0;
    static final double q4 =0;
    static final double q3 =0;
    static final double q2=0;
    static final double q1 =0;
    static final double q0 =0;
    static final double PIO2=0;
    static final double nan=0;
    // reduce
    private static double mxatan(double arg)
    {
        double argsq, value;

        argsq = arg*arg;
        value = ((((p4*argsq + p3)*argsq + p2)*argsq + p1)*argsq + p0);
        value = value/(((((argsq + q4)*argsq + q3)*argsq + q2)*argsq + q1)*argsq + q0);
        return value*arg;
    }

    // reduce
    private static double msatan(double arg)
    {
        if(arg < sq2m1)
            return mxatan(arg);
        if(arg > sq2p1)
            return PIO2 - mxatan(1/arg);
            return PIO2/2 + mxatan((arg-1)/(arg+1));
    }

    // implementation of atan
    public static double atan(double arg)
    {
        if(arg > 0)
            return msatan(arg);
        return -msatan(-arg);
    }

    // implementation of atan2
    public static double atan2(double arg1, double arg2)
    {
        if(arg1+arg2 == arg1)
        {
            if(arg1 >= 0)
            return PIO2;
                return -PIO2;
        }
        arg1 = atan(arg1/arg2);
        if(arg2 < 0)
       {
            if(arg1 <= 0)
                return arg1 + Math.PI;
            return arg1 - Math.PI;
        }
        return arg1;
    
    }

    // implementation of asin
    public static double asin(double arg)
    {
        double temp;
        int sign;

        sign = 0;
        if(arg < 0)
        {
            arg = -arg;
            sign++;
        }
        if(arg > 1)
            return nan;
        temp = Math.sqrt(1 - arg*arg);
        if(arg > 0.7)
            temp = PIO2 - atan(temp/arg);
        else
            temp = atan(arg/temp);
        if(sign > 0)
            temp = -temp;
        return temp;
    }

    // implementation of acos
    public static double acos(double arg)
    {
        if(arg > 1 || arg < -1)
            return nan;
        return PIO2 - asin(arg);
    }

    public mMath()
    {
    }
    
    public static int round(float a) {
        if (a>0.4f && a <0.5f) 
            return 0;
        else
            return (int)Math.floor(a + 0.5f);
    }
    
    public static long round(double a) {
    	if (a>0.4d && a <0.5d)
            return 0;
        else
            return (long)Math.floor(a + 0.5d);
    }
}